export ‚≠ï
export HSVtoRGB

import LinearAlgebra

struct ‚≠ï
    b::Array{Complex}
    f::Array{Float64,2}
    m::Array{Float64,4}
    c::Array{Float64,4}
    s::Integer
    r::Float64
    q::‚Ñç
    p::Array{Float64}
end

Œª(z‚ÇÅ, z‚ÇÇ) = begin
    d = 1 .- imag.(z‚ÇÇ)
    y = [real.(z‚ÇÅ) ./ d imag.(z‚ÇÅ) ./ d real.(z‚ÇÇ) ./ d]
    c = similar(y)
    sigmoid(x) = 2 / (1 + exp(-x)) .- 1
    for i in 1:size(y, 1)
        c[i, :] = LinearAlgebra.normalize(y[i, :]) .* tanh(LinearAlgebra.norm(y[i, :]))
    end
    c
end

HSVtoRGB(hsv) = begin
    H, S, V = hsv
    C = V * S
    X = C * (1 - Base.abs((H / 60) % 2 - 1))
    m = V - C
    if 0 ‚â§ H < 60
        R‚Ä≤, G‚Ä≤, B‚Ä≤ = C, X, 0
    elseif 60 ‚â§ H < 120
        R‚Ä≤, G‚Ä≤, B‚Ä≤ = X, C, 0
    elseif 120 ‚â§ H < 180
        R‚Ä≤, G‚Ä≤, B‚Ä≤ = 0, C, X
    elseif 180 ‚â§ H < 240
        R‚Ä≤, G‚Ä≤, B‚Ä≤ = 0, X, C
    elseif 240 ‚â§ H < 300
        R‚Ä≤, G‚Ä≤, B‚Ä≤ = X, 0, C
    elseif 300 ‚â§ H < 360
        R‚Ä≤, G‚Ä≤, B‚Ä≤ = C, 0, X
    else
        R‚Ä≤, G‚Ä≤, B‚Ä≤ = rand(3)
    end
    R, G, B = R‚Ä≤ + m, G‚Ä≤ + m, B‚Ä≤ + m
    [R; G; B]
end

function get_fibers(b::Array{Complex},
                    f::Array{Float64,2},
                    s::Integer,
                    r::Float64,
                    q::‚Ñç,
                    offset::Array{Float64})
    samples = size(b, 1)
    Œ∏‚ÇÅ, Œ∏‚ÇÇ = f[:, 1], f[:, 2]
    Q = [1.0; 0.0; 0.0; 0.0]
    n·µ¢ = [0; 0; 1]
    s2 = Integer(s √∑ 3)
    œà = range(0, stop = 2pi, length = s2)
    zero = fill(0, s2)
    m = Array{Float64,4}(undef, samples, s, s2, 3)
    c = similar(m)
    construct(b, Œæ‚ÇÇ, q) = begin
        samples = size(Œæ‚ÇÇ, 1)
        z‚ÇÅ = exp.(im .* (Œæ‚ÇÇ .+ imag.(b) ./ 2)) .* cos.(atan.(real.(b)))
        z‚ÇÇ = exp.(im .* (Œæ‚ÇÇ .- imag.(b) ./ 2)) .* sin.(atan.(real.(b)))
        rotatedz‚ÇÅ = Array{Complex}(undef, samples)
        rotatedz‚ÇÇ =  similar(rotatedz‚ÇÅ)
        for i in 1:samples
            rotated = ‚Ñç([real.(z‚ÇÅ[i]); imag.(z‚ÇÅ[i]); real.(z‚ÇÇ[i]); imag.(z‚ÇÇ[i])]) * q
            rotatedz‚ÇÅ[i] = Complex(rotated.q[1], rotated.q[2])
            rotatedz‚ÇÇ[i] = Complex(rotated.q[3], rotated.q[4])
        end
        rotatedz‚ÇÅ, rotatedz‚ÇÇ
    end
    for i in 1:samples
        Œæ‚ÇÇ = range(Œ∏‚ÇÅ[i], stop = Œ∏‚ÇÇ[i], length = s)
        z‚ÇÅ, z‚ÇÇ = construct(b[i], Œæ‚ÇÇ, q)
        p = Œª(z‚ÇÅ, z‚ÇÇ)
        p‚Ä≤ = circshift(p, 1)
        P = [real(z‚ÇÅ[1]); imag(z‚ÇÅ[1]); real(z‚ÇÇ[1]); imag(z‚ÇÇ[1])]
        hue = acos(LinearAlgebra.dot(P, Q)) / pi
        rgb = HSVtoRGB([hue * 360; 1.0; 1.0])
        c[i, :, :, :] = reshape(repeat(rgb', s * s2), s, s2, 3)
        for j in 1:s
            n = LinearAlgebra.normalize(p‚Ä≤[j, :] - p[j, :])
            u = LinearAlgebra.normalize(LinearAlgebra.cross(n·µ¢, n))
            Œ≤ = acos(LinearAlgebra.dot(n·µ¢, n)) / 2
            h2 = ‚Ñç([cos(Œ≤); sin(Œ≤) .* u])
            circle = [r .* cos.(œà) r .* sin.(œà) zero]
            m[i, j, :, :] = üíû(circle,
                               h2) + repeat((p[j, :])', s2, 1) + repeat(offset', s2, 1)
        end
    end
    m, c
end

‚≠ï(b::Array{Complex}, f::Array{Float64,2}, s::Int64, r::Float64, q::‚Ñç, p::Array{Float64}) = begin
    m, c = get_fibers(b, f, s, r, q, p)
    ‚≠ï(b, f, m, c, s, r, q, p)
end
